import chai from 'chai';
chai.should();

const TIME = 500,
//      Should not be grater then TIME
      MAX_TICK_DELAY = 100;

import debounce from '../lib/debounce';
var last,
    n = 0;

class Editor {
    constructor() {
        this.n = n;
    }
    
    counter = 0;

    @debounce( TIME )
    updateCounter1() {
        this.counter++;
    }

    @debounce( TIME, true )
    updateCounter2() {
        this.counter++;
    }

    @debounce( TIME )
    updateCounter3 = () => {
        this.counter++;
    }
}

describe( 'debounce', function () {
    let editor;

    beforeEach( () => {
        editor = new Editor();
    } );

    it( 'invokes function only once', function ( done ) {
        editor.updateCounter1();
        editor.updateCounter1();
        editor.updateCounter1();

//        Test for delayed re-invoke
        setTimeout( () => {
            editor.updateCounter1();
            editor.counter.should.equal( 0 );
        }, MAX_TICK_DELAY );
        
//        MAX_TICK_DELAY`ms after original method invoke
        setTimeout( () => {
//            Creates new delay for original method invoke
            editor.updateCounter1();
            editor.counter.should.equal( 1 );
        }, TIME + 2 * MAX_TICK_DELAY );
        
//        MAX_TICK_DELAY`ms after another original method invoke
        setTimeout( () => {
            editor.counter.should.equal( 2 );
            done();
        }, 2 * TIME + 3 * MAX_TICK_DELAY );
    });

    it( 'invokes function only once (arrow fn as class prop)', function ( done ) {
        editor.updateCounter3();
        editor.updateCounter3();
        editor.updateCounter3();

        setTimeout( () => {
            editor.updateCounter3();
            editor.counter.should.equal( 0 );
        }, TIME - MAX_TICK_DELAY );
        
        setTimeout( () => {
            editor.counter.should.equal( 1 );
            done();
        }, 2 * TIME + MAX_TICK_DELAY );
    });

    it( 'invokes function immediately and only once  when `invokeAsap` = true', function ( done ) {
        editor.updateCounter2();
        editor.updateCounter2();
        editor.updateCounter2();

//        Test for delayed re-invoke
        setTimeout( () => {
            editor.updateCounter2();
            editor.counter.should.equal( 1 );
        }, MAX_TICK_DELAY );
        
//        MAX_TICK_DELAY`ms after original method invoke
        setTimeout( () => {
//            Creates new delay for original method invoke
            editor.updateCounter2();
            editor.counter.should.equal( 2 );
        }, TIME + 2 * MAX_TICK_DELAY );
        
//        MAX_TICK_DELAY`ms after another original method invoke
        setTimeout( () => {
            editor.counter.should.equal( 2 );
            done();
        }, 2 * TIME + 3 * MAX_TICK_DELAY );
    });

    it( 'Separate instances do not share timers', function ( done ) {
        let editor2 = new Editor();
        
        editor.updateCounter2();
        editor2.updateCounter2();
        
//        Test for delayed re-invoke
        setTimeout( () => {
            editor2.updateCounter2();
            
            editor.counter.should.equal( 1 );
            editor2.counter.should.equal( 1 );
        }, MAX_TICK_DELAY );

//        MAX_TICK_DELAY`ms after `editor2` original method invoke
        setTimeout( () => {
            editor.counter.should.equal( 1 );
            editor2.counter.should.equal( 1 );
            done();
        }, TIME + 2 * MAX_TICK_DELAY );
    });
    
});
